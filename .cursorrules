# Pocketbase React Hooks - Cursor Rules

## 🚫 Code Generation Rules
- NEVER add comments to generated code
- Keep code clean and minimal

## 🎯 Project Overview
This is a React hooks library for Pocketbase integration. The library provides custom hooks for authentication, data fetching, and real-time subscriptions.

## 🏗️ Architecture & Structure

### File Organization
- `src/context/` - React Context definitions
- `src/providers/` - React Provider components
- `src/hooks/` - Custom React hooks
- `src/hooks/utils.ts` - Shared utility functions
- `tests/` - Test files mirroring src structure
- `examples/` - Usage examples and documentation

### Key Files
- `src/index.ts` - Main entry point, exports all public APIs
- `vite.config.ts` - Unified build and test configuration
- `package.json` - Library configuration with proper exports

## 🔧 Development Stack

### Build & Bundling
- **Vite** for building (not tsup or Bun build)
- **vite-plugin-dts** for TypeScript declaration generation
- **ESM + CJS** dual output for maximum compatibility

### Testing
- **Vitest** (not Bun test runner) for unit tests
- **React Testing Library** for hook testing
- **jsdom** environment for DOM simulation
- **Coverage** with v8 provider

### Code Quality
- **Biome** for linting and formatting
- **lefthook** for git hooks (format on commit)
- **TypeScript** strict mode

## 📝 Code Conventions

### API Design
- Follow **TanStack Query** API patterns:
  - `isLoading` (not `isPending`)
  - `isSuccess`, `isError`, `error`, `data` states
- Use `signIn`/`signOut` (not `login`/`logout`)
- Use `signUp` (not `register`)

### TypeScript
- **Strict typing** - avoid `any`, use `unknown` when needed
- **Proper type guards** for runtime safety
- **Declaration files** auto-generated by vite-plugin-dts

### React Patterns
- **Custom hooks** for Pocketbase integration
- **Context + Provider** pattern for dependency injection
- **useEffect** for side effects, not useCallback for data fetching
- **Real-time subscriptions** with proper cleanup

### Testing Patterns
- **Mock Pocketbase** methods comprehensively
- **Test all hook states** (loading, success, error)
- **Verify real-time subscriptions** and cleanup
- **Use renderHook** from React Testing Library
- **No manual console.error mocks** (handled by vitest config)

## 🚀 Publishing & Versioning

### Version Management
- **Semantic versioning** with npm scripts:
  - `version:patch/minor/major` for stable releases
  - `version:alpha/beta/rc` for pre-releases
- **Pre-release tags**: `alpha`, `beta`, `rc`
- **Git tags** trigger GitHub Actions

### GitHub Actions
- **CI workflow** on push/PR to main/develop
- **Publish workflow** for stable releases (excludes pre-releases)
- **Prerelease workflow** for alpha/beta/rc versions
- **softprops/action-gh-release@v2** for GitHub releases (not deprecated v1)

### npm Publishing
- **Dual package** (ESM + CJS)
- **Proper exports** field in package.json
- **Peer dependencies** for React and Pocketbase
- **Pre-release tags** (beta) for testing

## 🛠️ Development Workflow

### Git Hooks (lefthook)
- **Pre-commit**: biome format, biome check, tsc --noEmit
- **Pre-push**: vitest run

### Scripts
- `bun run build` - Build library
- `bun run test` - Run tests
- `bun run test:watch` - Watch mode
- `bun run test:coverage` - Coverage report
- `bun run lint` - Lint code
- `bun run format` - Format code

### Dependencies
- **Bun** as package manager and runtime
- **Peer dependencies**: react, pocketbase
- **Dev dependencies**: vitest, biome, lefthook, vite

## 🎨 UI & UX

### Documentation
- **README in English** with clear examples
- **Examples directory** with basic and advanced usage
- **TypeScript examples** with proper imports
- **Database schema examples** for clarity

### Error Handling
- **Graceful error states** in hooks
- **Proper error messages** for debugging
- **Real-time subscription cleanup** to prevent memory leaks

## 🔍 Code Review Guidelines

### What to Check
- ✅ **API consistency** with TanStack Query patterns
- ✅ **TypeScript strictness** - no `any` types
- ✅ **Test coverage** for all hook states
- ✅ **Real-time subscription cleanup**
- ✅ **Proper error handling**
- ✅ **English documentation** and comments

### Common Issues to Avoid
- ❌ Using `isPending` instead of `isLoading`
- ❌ Manual `console.error` mocks in tests
- ❌ Missing cleanup in useEffect
- ❌ Using `any` types in TypeScript
- ❌ French comments or documentation
- ❌ Deprecated GitHub Actions (use v2, not v1)

## 📚 Resources
- [Pocketbase Documentation](https://pocketbase.io/docs/)
- [TanStack Query API](https://tanstack.com/query/latest)
- [React Testing Library](https://testing-library.com/docs/react-testing-library/intro/)
- [Vitest Documentation](https://vitest.dev/)
- [Biome Documentation](https://biomejs.dev/)
